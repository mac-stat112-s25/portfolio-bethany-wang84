{"title":"Wrangling","markdown":{"yaml":{"title":"Wrangling"},"headingText":"Load tidyverse & data","containsRefs":false,"markdown":"\n```{r}\nlibrary(tidyverse)\nelections <- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n# Get a background map\nlibrary(socviz)\ndata(county_map)\n\n# Make a choropleth map\nlibrary(RColorBrewer)  # For the color scale\nlibrary(ggthemes) # For theme_map\nelections |> \n  mutate(county_fips = as.character(county_fips)) |> \n  mutate(county_fips = \n           ifelse(nchar(county_fips) == 4, paste0(\"0\", county_fips), county_fips)) |> \n  ggplot(aes(map_id = county_fips, fill = cut(repub_pct_20, breaks = seq(0, 100, by = 10)))) +\n    geom_map(map = county_map) +\n    scale_fill_manual(values = rev(brewer.pal(10, \"RdBu\")), name = \"% Republican\") +\n    expand_limits(x = county_map$long, y = county_map$lat)  + \n    theme_map() +\n    theme(legend.position = \"right\") + \n    coord_equal()\n```\n```{r}\n# Load tidyverse for data wrangling and plotting\nlibrary(tidyverse)\n\n# Exercise 1: select Practice\n# Create elections_small with only the specified columns\nelections_small <- elections %>%\n  select(state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20,\n         total_votes_16, dem_pct_16)\nhead(elections_small)  # confirm it worked\n\n# Exercise 2: filter Demo\n# Keep only counties in Hawaii\nelections_small %>% \n  filter(state_name == \"Hawaii\")\n\n# Keep only counties in Hawaii or Delaware\nelections_small %>% \n  filter(state_name %in% c(\"Hawaii\", \"Delaware\"))\n\n# Counties where GOP got > 93.97% in 2020\nelections_small %>% \n  filter(repub_pct_20 > 93.97)\n\n# Counties where GOP got ≥ 93.97% in 2020 (one more than above)\nelections_small %>% \n  filter(repub_pct_20 >= 93.97)\n\n# Texas counties where Dems > 65% in 2020, Method 1 (two filters)\nelections_small %>% \n  filter(state_name == \"Texas\") %>% \n  filter(dem_pct_20 > 65)\n\n# Texas counties where Dems > 65% in 2020, Method 2 (one filter)\nelections_small %>% \n  filter(state_name == \"Texas\", dem_pct_20 > 65)\n\n# Exercise 3: arrange Demo\n# Counties sorted lowest to highest GOP % in 2020\nelections_small %>% \n  arrange(repub_pct_20) %>% \n  head()\n\n# Counties sorted highest to lowest GOP % in 2020\nelections_small %>% \n  arrange(desc(repub_pct_20)) %>% \n  head()\n\n# Exercise 4: mutate Demo\n# a) Create diff_20 = repub_pct_20 − dem_pct_20\nelections_small %>% \n  mutate(diff_20 = repub_pct_20 - dem_pct_20) %>% \n  head()\n\n# b) Compute repub_votes_20 via rounding\nelections_small %>% \n  mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) %>% \n  head()\n\n# c) Logical column: did GOP win in 2020?\nelections_small %>% \n  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) %>% \n  head()\n\n# Part b: Define Dem change and indicator\n# Change in Dem support 2020 vs 2016\nelections_small %>% \n  mutate(dem_change = dem_pct_20 - dem_pct_16) %>% \n  head()\n\n# Was Dem support higher in 2020 than 2016?\nelections_small %>% \n  mutate(dem_higher_20 = dem_pct_20 > dem_pct_16) %>% \n  head()\n\n# Exercise 5: Pipe Series\n# a) Wisconsin counties where GOP lost in 2020, sorted by turnout\nelections_small %>% \n  filter(state_name == \"Wisconsin\", repub_pct_20 < dem_pct_20) %>% \n  arrange(desc(total_votes_20)) %>% \n  head()\n\n# b) Swapping filter & arrange still yields same rows; filtering first reduces data before sorting.\n# c) Advantage: filtering early limits data volume for subsequent steps.\n# d) Delaware counties with GOP win indicator\nelections_small %>% \n  filter(state_name == \"Delaware\") %>% \n  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) %>% \n  select(county_name, repub_pct_20, dem_pct_20, repub_win_20)\n\n# e) If we select before mutate, repub_win_20 doesn't yet exist → error. Order matters when selecting new vars.\n\n# Exercise 6: DIY Pipe Series\n# a) MN counties and their 2020 Dem % from highest to lowest\nelections_small %>% \n  filter(state_name == \"Minnesota\") %>% \n  select(county_name, dem_pct_20) %>% \n  arrange(desc(dem_pct_20))\n\n# b) mn_wi: change in Dem % for MN & WI, sorted by change ascending\nmn_wi <- elections_small %>% \n  filter(state_name %in% c(\"Minnesota\", \"Wisconsin\")) %>% \n  mutate(dem_change = dem_pct_20 - dem_pct_16) %>% \n  select(state_name, county_name, dem_pct_20, dem_pct_16, dem_change) %>% \n  arrange(dem_change)\nhead(mn_wi)\n\n# c) Plot change in Dem % by county, colored by state\nggplot(mn_wi, aes(x = dem_change, y = county_name, color = state_name)) +\n  geom_point() +\n  labs(x = \"Change in Dem % (2020 vs 2016)\", y = \"County\", color = \"State\")\n\n# Exercise 7: summarize Demo\n# Median GOP % in 2020\nelections_small %>% summarize(median(repub_pct_20))\n# Named summary\nelections_small %>% summarize(median_repub = median(repub_pct_20))\n# Multiple summaries\nelections_small %>% summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))\n\n# Exercise 8: group_by + summarize\n# Summary by state\nelections_small %>% \n  group_by(state_name) %>% \n  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))\n\n# Exercise 9: DIY Summaries\n# Total votes by state, sorted\nelections_small %>% \n  group_by(state_name) %>% \n  summarize(total_votes_state = sum(total_votes_20)) %>% \n  arrange(desc(total_votes_state))\n\n# Total Dem & GOP votes by state\nelections_small %>% \n  mutate(dem_votes = round(total_votes_20 * dem_pct_20 / 100),\n         rep_votes = round(total_votes_20 * repub_pct_20 / 100)) %>% \n  group_by(state_name) %>% \n  summarize(dem_votes = sum(dem_votes), rep_votes = sum(rep_votes))\n\n# States the Democrats won in 2020\nelections_small %>% \n  mutate(dem_votes = round(total_votes_20 * dem_pct_20 / 100),\n         rep_votes = round(total_votes_20 * repub_pct_20 / 100)) %>% \n  group_by(state_name) %>% \n  summarize(dem_votes = sum(dem_votes), rep_votes = sum(rep_votes)) %>% \n  filter(dem_votes > rep_votes)\n\n# Exercise 10: Practice on World Cup data\nworld_cup <- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv\")\n\n# Years Brazil won\nworld_cup %>% filter(winner == \"Brazil\") %>% pull(year)\n\n# Top 6 World Cups by attendance\nworld_cup %>% arrange(desc(attendance)) %>% head(6)\n\n# Univariate plot of goals_scored\nggplot(world_cup, aes(x = goals_scored)) +\n  geom_histogram(binwidth = 10) +\n  labs(x = \"Goals Scored\", y = \"Count of World Cups\")\n\n# Summary stats: min, median, max goals_scored\nworld_cup %>% summarize(\n  min_goals = min(goals_scored),\n  median_goals = median(goals_scored),\n  max_goals = max(goals_scored)\n)\n\n# Bivariate: goals_scored over the years\nggplot(world_cup, aes(x = year, y = goals_scored)) +\n  geom_point() +\n  geom_line() +\n  labs(x = \"Year\", y = \"Goals Scored\")\n\n```\n\n","srcMarkdownNoYaml":"\n```{r}\n# Load tidyverse & data\nlibrary(tidyverse)\nelections <- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n# Get a background map\nlibrary(socviz)\ndata(county_map)\n\n# Make a choropleth map\nlibrary(RColorBrewer)  # For the color scale\nlibrary(ggthemes) # For theme_map\nelections |> \n  mutate(county_fips = as.character(county_fips)) |> \n  mutate(county_fips = \n           ifelse(nchar(county_fips) == 4, paste0(\"0\", county_fips), county_fips)) |> \n  ggplot(aes(map_id = county_fips, fill = cut(repub_pct_20, breaks = seq(0, 100, by = 10)))) +\n    geom_map(map = county_map) +\n    scale_fill_manual(values = rev(brewer.pal(10, \"RdBu\")), name = \"% Republican\") +\n    expand_limits(x = county_map$long, y = county_map$lat)  + \n    theme_map() +\n    theme(legend.position = \"right\") + \n    coord_equal()\n```\n```{r}\n# Load tidyverse for data wrangling and plotting\nlibrary(tidyverse)\n\n# Exercise 1: select Practice\n# Create elections_small with only the specified columns\nelections_small <- elections %>%\n  select(state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20,\n         total_votes_16, dem_pct_16)\nhead(elections_small)  # confirm it worked\n\n# Exercise 2: filter Demo\n# Keep only counties in Hawaii\nelections_small %>% \n  filter(state_name == \"Hawaii\")\n\n# Keep only counties in Hawaii or Delaware\nelections_small %>% \n  filter(state_name %in% c(\"Hawaii\", \"Delaware\"))\n\n# Counties where GOP got > 93.97% in 2020\nelections_small %>% \n  filter(repub_pct_20 > 93.97)\n\n# Counties where GOP got ≥ 93.97% in 2020 (one more than above)\nelections_small %>% \n  filter(repub_pct_20 >= 93.97)\n\n# Texas counties where Dems > 65% in 2020, Method 1 (two filters)\nelections_small %>% \n  filter(state_name == \"Texas\") %>% \n  filter(dem_pct_20 > 65)\n\n# Texas counties where Dems > 65% in 2020, Method 2 (one filter)\nelections_small %>% \n  filter(state_name == \"Texas\", dem_pct_20 > 65)\n\n# Exercise 3: arrange Demo\n# Counties sorted lowest to highest GOP % in 2020\nelections_small %>% \n  arrange(repub_pct_20) %>% \n  head()\n\n# Counties sorted highest to lowest GOP % in 2020\nelections_small %>% \n  arrange(desc(repub_pct_20)) %>% \n  head()\n\n# Exercise 4: mutate Demo\n# a) Create diff_20 = repub_pct_20 − dem_pct_20\nelections_small %>% \n  mutate(diff_20 = repub_pct_20 - dem_pct_20) %>% \n  head()\n\n# b) Compute repub_votes_20 via rounding\nelections_small %>% \n  mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) %>% \n  head()\n\n# c) Logical column: did GOP win in 2020?\nelections_small %>% \n  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) %>% \n  head()\n\n# Part b: Define Dem change and indicator\n# Change in Dem support 2020 vs 2016\nelections_small %>% \n  mutate(dem_change = dem_pct_20 - dem_pct_16) %>% \n  head()\n\n# Was Dem support higher in 2020 than 2016?\nelections_small %>% \n  mutate(dem_higher_20 = dem_pct_20 > dem_pct_16) %>% \n  head()\n\n# Exercise 5: Pipe Series\n# a) Wisconsin counties where GOP lost in 2020, sorted by turnout\nelections_small %>% \n  filter(state_name == \"Wisconsin\", repub_pct_20 < dem_pct_20) %>% \n  arrange(desc(total_votes_20)) %>% \n  head()\n\n# b) Swapping filter & arrange still yields same rows; filtering first reduces data before sorting.\n# c) Advantage: filtering early limits data volume for subsequent steps.\n# d) Delaware counties with GOP win indicator\nelections_small %>% \n  filter(state_name == \"Delaware\") %>% \n  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) %>% \n  select(county_name, repub_pct_20, dem_pct_20, repub_win_20)\n\n# e) If we select before mutate, repub_win_20 doesn't yet exist → error. Order matters when selecting new vars.\n\n# Exercise 6: DIY Pipe Series\n# a) MN counties and their 2020 Dem % from highest to lowest\nelections_small %>% \n  filter(state_name == \"Minnesota\") %>% \n  select(county_name, dem_pct_20) %>% \n  arrange(desc(dem_pct_20))\n\n# b) mn_wi: change in Dem % for MN & WI, sorted by change ascending\nmn_wi <- elections_small %>% \n  filter(state_name %in% c(\"Minnesota\", \"Wisconsin\")) %>% \n  mutate(dem_change = dem_pct_20 - dem_pct_16) %>% \n  select(state_name, county_name, dem_pct_20, dem_pct_16, dem_change) %>% \n  arrange(dem_change)\nhead(mn_wi)\n\n# c) Plot change in Dem % by county, colored by state\nggplot(mn_wi, aes(x = dem_change, y = county_name, color = state_name)) +\n  geom_point() +\n  labs(x = \"Change in Dem % (2020 vs 2016)\", y = \"County\", color = \"State\")\n\n# Exercise 7: summarize Demo\n# Median GOP % in 2020\nelections_small %>% summarize(median(repub_pct_20))\n# Named summary\nelections_small %>% summarize(median_repub = median(repub_pct_20))\n# Multiple summaries\nelections_small %>% summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))\n\n# Exercise 8: group_by + summarize\n# Summary by state\nelections_small %>% \n  group_by(state_name) %>% \n  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))\n\n# Exercise 9: DIY Summaries\n# Total votes by state, sorted\nelections_small %>% \n  group_by(state_name) %>% \n  summarize(total_votes_state = sum(total_votes_20)) %>% \n  arrange(desc(total_votes_state))\n\n# Total Dem & GOP votes by state\nelections_small %>% \n  mutate(dem_votes = round(total_votes_20 * dem_pct_20 / 100),\n         rep_votes = round(total_votes_20 * repub_pct_20 / 100)) %>% \n  group_by(state_name) %>% \n  summarize(dem_votes = sum(dem_votes), rep_votes = sum(rep_votes))\n\n# States the Democrats won in 2020\nelections_small %>% \n  mutate(dem_votes = round(total_votes_20 * dem_pct_20 / 100),\n         rep_votes = round(total_votes_20 * repub_pct_20 / 100)) %>% \n  group_by(state_name) %>% \n  summarize(dem_votes = sum(dem_votes), rep_votes = sum(rep_votes)) %>% \n  filter(dem_votes > rep_votes)\n\n# Exercise 10: Practice on World Cup data\nworld_cup <- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv\")\n\n# Years Brazil won\nworld_cup %>% filter(winner == \"Brazil\") %>% pull(year)\n\n# Top 6 World Cups by attendance\nworld_cup %>% arrange(desc(attendance)) %>% head(6)\n\n# Univariate plot of goals_scored\nggplot(world_cup, aes(x = goals_scored)) +\n  geom_histogram(binwidth = 10) +\n  labs(x = \"Goals Scored\", y = \"Count of World Cups\")\n\n# Summary stats: min, median, max goals_scored\nworld_cup %>% summarize(\n  min_goals = min(goals_scored),\n  median_goals = median(goals_scored),\n  max_goals = max(goals_scored)\n)\n\n# Bivariate: goals_scored over the years\nggplot(world_cup, aes(x = year, y = goals_scored)) +\n  geom_point() +\n  geom_line() +\n  labs(x = \"Year\", y = \"Goals Scored\")\n\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"css":["../style/custom.css"],"output-file":"ica-wrangling.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":{"markdown":{"wrap":"sentence"}},"theme":{"light":"flatly","dark":"darkly"},"code-copy":true,"title":"Wrangling"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}