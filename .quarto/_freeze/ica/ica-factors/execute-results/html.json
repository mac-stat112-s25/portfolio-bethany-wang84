{
  "hash": "b478ec1ea9eb0dc0d65b6674313194e6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Factors\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load tidyverse for dplyr, ggplot2, and forcats\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n# Reload and dedupe the grades data\ngrades <- read.csv(\"https://mac-stat.github.io/data/grades.csv\") %>%\n  distinct(sid, sessionID, .keep_all = TRUE)\n\n# Compute how many times each grade was assigned\ngrade_distribution <- grades %>% count(grade)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exercise 1: Changing Order\n\n# a) Manually specify grade levels from highest to lowest, with 'S' and 'AU' last\ngrade_distribution %>%\n  mutate(\n    grade = factor(\n      grade,\n      levels = c(\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"C-\",\"D+\",\"D\",\"D-\",\"NC\",\"S\",\"AU\")\n    )\n  ) %>%\n  ggplot(aes(x = grade, y = n)) +\n    geom_col() +\n    labs(\n      title = \"Grade Distribution (Manual Order)\",\n      x = \"Grade\",\n      y = \"Count\"\n    )\n```\n\n::: {.cell-output-display}\n![](ica-factors_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# • factor(..., levels=...) sets the exact ordering of grade categories.\n\n# b) Reorder grades by ascending frequency\ngrade_distribution %>%\n  mutate(grade = fct_reorder(grade, n)) %>%\n  ggplot(aes(x = grade, y = n)) +\n    geom_col() +\n    labs(\n      title = \"Grade Distribution (Ascending Frequency)\",\n      x = \"Grade (Least to Most Frequent)\",\n      y = \"Count\"\n    )\n```\n\n::: {.cell-output-display}\n![](ica-factors_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# • fct_reorder(grade, n) reorders factor levels by the numeric 'n' in ascending order.\n\n# c) Reorder grades by descending frequency\ngrade_distribution %>%\n  mutate(grade = fct_reorder(grade, n, .desc = TRUE)) %>%\n  ggplot(aes(x = grade, y = n)) +\n    geom_col() +\n    labs(\n      title = \"Grade Distribution (Descending Frequency)\",\n      x = \"Grade (Most to Least Frequent)\",\n      y = \"Count\"\n    )\n```\n\n::: {.cell-output-display}\n![](ica-factors_files/figure-html/unnamed-chunk-2-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# • fct_reorder(..., .desc=TRUE) flips the order to descending.\n\n# Exercise 2: Changing Factor Level Labels\n\ngrade_distribution %>%\n  # First ensure the manual order\n  mutate(\n    grade = factor(\n      grade,\n      levels = c(\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"C-\",\"D+\",\"D\",\"D-\",\"NC\",\"S\",\"AU\")\n    )\n  ) %>%\n  # Then recode two levels for clarity\n  mutate(\n    grade = fct_recode(\n      grade,\n      Audit        = \"AU\",\n      Satisfactory = \"S\"\n    )\n  ) %>%\n  ggplot(aes(x = grade, y = n)) +\n    geom_col() +\n    labs(\n      title = \"Grade Distribution with Clear Labels\",\n      x = \"Grade\",\n      y = \"Count\"\n    )\n```\n\n::: {.cell-output-display}\n![](ica-factors_files/figure-html/unnamed-chunk-2-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# • fct_recode(...) renames selected factor levels, leaving others unchanged.\n```\n:::\n",
    "supporting": [
      "ica-factors_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}